From 6cd0bd89e5d79d5e323220553f1aa8761e7bd6a9 Mon Sep 17 00:00:00 2001
From: Gary Guo <gary.guo@lowrisc.org>
Date: Fri, 2 Aug 2024 11:32:48 +0100
Subject: [PATCH 1/2] Set FUSE entry expiration time

Currently entry expiration is not set, which means that the dentry is
thrown away after each use, causing significant overhead since every
lookup operation needs to call into userspace.

Entry captures the mapping from file name to inode. The kernel list
cache option allows readdir response to be cached, which is also
dentry, so I reuse the same TTL for entry expiration timeout.
This is conservative, and I am pretty sure there can be further
performance improvement by setting the expiration in more cases (as the
object generation number is also cached).

There are a few other places where dentry is returned, e.g. create or
mkdir, but since the cache is more useful for readonly/read-mostly FS, I
didn't bother setting the dentry expiration time for these calls.

This change brings significant performance improvement due for readonly
workloads.
* I tested the change with a bucket that have 6000 files, using `du -hs`
  on the directory (it will stat all the files.). I ran the command once
  to populate the cache, and then time the second run. The change
  reduces time taken by the command from 532ms to 72ms.
* I also tested the change in a production compilation workload. The
  time taken for each run reduces from 7 minutes to 1 minute.

Signed-off-by: Gary Guo <gary.guo@lowrisc.org>
---
 internal/fs/fs.go | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/internal/fs/fs.go b/internal/fs/fs.go
index befb0b417..d8bfa3c01 100644
--- a/internal/fs/fs.go
+++ b/internal/fs/fs.go
@@ -1401,6 +1401,12 @@ func (fs *fileSystem) LookUpInode(
 		return err
 	}
 
+	// If list cache is enabled, directory entries returned by ReadDir may be cached.
+	// So we can also cache the directory entries returned by Lookup.
+	if fs.kernelListCacheTTL > 0 {
+		e.EntryExpiration = time.Now().Add(fs.kernelListCacheTTL)
+	}
+
 	return
 }
 

From 069b4a7d6c1b467f08a706db580ca514fc5a4a2a Mon Sep 17 00:00:00 2001
From: Gary Guo <gary.guo@lowrisc.org>
Date: Mon, 5 Aug 2024 13:50:10 +0100
Subject: [PATCH 2/2] Enable negative dentry caching

This can bring perf improvement in compilation workload where the
compiler searches for headers.

Signed-off-by: Gary Guo <gary.guo@lowrisc.org>
---
 internal/fs/fs.go | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/internal/fs/fs.go b/internal/fs/fs.go
index d8bfa3c01..bf7bdc233 100644
--- a/internal/fs/fs.go
+++ b/internal/fs/fs.go
@@ -1387,6 +1387,16 @@ func (fs *fileSystem) LookUpInode(
 	// Find or create the child inode.
 	child, err := fs.lookUpOrCreateChildInode(ctx, parent, op.Name)
 	if err != nil {
+		// If both list cache and nonexistent type cache is enabled, we also
+		// instruct FUSE to cache negative entries.
+		if err == fuse.ENOENT && fs.enableNonexistentTypeCache && fs.kernelListCacheTTL > 0 {
+			// Inode 0 is equal to ENOENT return, but allows FUSE to cache the response.
+			err = nil
+			e := &op.Entry
+			e.Child = 0
+			e.EntryExpiration = time.Now().Add(fs.kernelListCacheTTL)
+			return
+		}
 		return err
 	}
 
