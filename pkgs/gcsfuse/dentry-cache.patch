commit 07e7e710a598049c4a8b1d0ec6fc24fba8b3234a
Author: Gary Guo <gary.guo@lowrisc.org>
Date:   Mon Aug 5 13:50:10 2024 +0100

    Enable negative dentry caching
    
    This can bring perf improvement in compilation workload where the
    compiler searches for headers.
    
    Signed-off-by: Gary Guo <gary.guo@lowrisc.org>

diff --git a/internal/fs/fs.go b/internal/fs/fs.go
index 4328dbc9f..61375ac82 100644
--- a/internal/fs/fs.go
+++ b/internal/fs/fs.go
@@ -1688,6 +1688,16 @@ func (fs *fileSystem) LookUpInode(
 	// Find or create the child inode.
 	child, err := fs.lookUpOrCreateChildInode(ctx, parent, op.Name)
 	if err != nil {
+		// If both list cache and nonexistent type cache is enabled, we also
+		// instruct FUSE to cache negative entries.
+		if err == fuse.ENOENT && fs.enableNonexistentTypeCache && fs.inodeAttributeCacheTTL > 0 &&
+			fs.newConfig.FileSystem.ExperimentalEnableDentryCache {
+			// Inode 0 is equal to ENOENT return, but allows FUSE to cache the response.
+			e := &op.Entry
+			e.Child = 0
+			e.EntryExpiration = time.Now().Add(fs.inodeAttributeCacheTTL)
+			return nil
+		}
 		return err
 	}
 
