From f6009299a4ba89453636424f90075a9c58f7d7d9 Mon Sep 17 00:00:00 2001
From: Gary Guo <gary.guo@lowrisc.org>
Date: Mon, 5 Aug 2024 12:44:11 +0100
Subject: [PATCH 1/2] Fix size of symlinks

Symlink inodes are expected to have size equal to the length of its
target. This is defined in POSIX spec.

FUSE's symlink cache also expects this, so fixing this prepares the
enabling of the symlink cache.

Signed-off-by: Gary Guo <gary.guo@lowrisc.org>
---
 internal/fs/inode/symlink.go | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/internal/fs/inode/symlink.go b/internal/fs/inode/symlink.go
index eaa3a1667..5c66a826c 100644
--- a/internal/fs/inode/symlink.go
+++ b/internal/fs/inode/symlink.go
@@ -84,6 +84,10 @@ func NewSymlinkInode(
 			Atime: m.Updated,
 			Ctime: m.Updated,
 			Mtime: m.Updated,
+			// POSIX spec requires that for symbolic links, size attribute
+			// reflects the length in bytes of the pathname contained in the
+			// symbolic link. This is also expected by symlink cache in FUSE.
+			Size: uint64(len(m.Metadata[SymlinkMetadataKey])),
 		},
 		target: m.Metadata[SymlinkMetadataKey],
 	}

From 5f01c89e9da7210c4023cd270f8cf43935c6a4ca Mon Sep 17 00:00:00 2001
From: Gary Guo <gary.guo@lowrisc.org>
Date: Sat, 3 Aug 2024 21:44:47 +0100
Subject: [PATCH 2/2] Enable kernel symlink caching

This would provide significant savings when symlink'ed path is
frequently accessed.

Since symlink target is not mutable, this is always safe regardless TTL
settings. (When the symlink is removed and re-created, its generatiton
would change so a different inode is created).

Signed-off-by: Gary Guo <gary.guo@lowrisc.org>
---
 cmd/mount.go | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/cmd/mount.go b/cmd/mount.go
index 8096838ac..ec118db42 100644
--- a/cmd/mount.go
+++ b/cmd/mount.go
@@ -165,6 +165,9 @@ func getFuseMountConfig(fsName string, newConfig *cfg.Config) *fuse.MountConfig
 		// access two files under same directory parallely, then the lookups also
 		// happen parallely.
 		EnableParallelDirOps: !(newConfig.FileSystem.DisableParallelDirops),
+		// Symlink target is not mutable (removing and re-creating would cause a different
+		// inode to be created), so it's safe to enable symlink caching.
+		EnableSymlinkCaching: true,
 	}
 
 	mountCfg.ErrorLogger = logger.NewLegacyLogger(logger.LevelError, "fuse: ")
